#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# import standard libraries
import datetime
import numpy
import matplotlib.pyplot
import sys
import os
from pathlib import Path

# setting-up the paths
root_dir = os.getcwd()
print(root_dir)

# insert path where the local libraries are located
sys.path.insert(0,root_dir)
sys.path.insert(0,'/net/home/h01/nvalient/nvalient-python/')

# import local library
import pyww3.obs_funs.read_obs_insitu as rdobs

"""
Created on Wed Feb 10 10:47:48 2021

 SCRIPT EXAMPLE TO LOAD AND CONCATENATE IN-SITU OBSERVATIONS AT A PARTICULAR LOCATION
 Input: - IDs
        - Variable to concatenate
        - Obs type: 'WFVS', 'WAVENET', 'SHPSYN'
        - Period for timeseries

@author: nvalient
"""
# set out_dir to save the plots
outdir = os.path.join(root_dir,'img/')
Path(outdir).mkdir(parents=True, exist_ok=True)
# -------------------------------------------------------------------------
# In-situ obs type
obs_name = 'WAVENET'

# Station IDs
# [INFO]
# WAVENET
# station_id = [6201063, 6201024, 6200047, 6201042, 6201008, 6201012, 6200301, 
#    6201050, 6201006, 6201028, 6201027, 6200289, 6201052, 6200045, 6201017, 
#    6201018, 6201051, 6200288, 6201011, 6201019, 6201053, 6200287, 6201025, 
#    6201059, 6201009, 6201004, 6200046, 6201029, 6201047, 6201041, 6201000, 
#    6201001, 6201015, 6200290, 6201044, 6201013, 6201054, 6201010, 6201045, 
#    6200292, 6201014, 6200044, 6201062, 6200043, 6201002, 6201003, 6200293, 
#    6201005, 6201058, 6200048, 6201026, 6201007, 6201046 ]
IDs = ['6262047'] 

# WFVS-JCOMM
# idsobs = ['13130', '13131', '21178', '22101', '22102', '22103', '22104',
#        '22105', '22106', '22107', '22108', '23091', '23094', '23097',
#        '23451', '23453', '23456', '23460', '24023', '25077', '25138',
#        '31052', '31053', '31260', '31261', '31374', '31375', '32012',
#        '41001', '41002', '41004', '41008', '41009', '41010', '41012',
#        '41013', '41025', '41040', '41041', '41043', '41044', '41046',
#        '41047', '41048', '41049', '41060', '41141', '41300', '42001',
#        '42002', '42003', '42012', '42019', '42020', '42035', '42036',
#        '42039', '42040', '42055', '42056', '42057', '42058', '42059',
#        '42060', '42065', '42099', '42360', '42369', '42376', '42392',
#        '44004', '44005', '44007', '44008', '44009', '44011', '44014',
#        '44017', '44018', '44024', '44025', '44027', '44030', '44032',
#        '44034', '44037', '44038', '44050', '44056', '44065', '44066',
#        '44095', '44096', '44097', '44098', '44099', '44100', '44137',
#        '44138', '44139', '44140', '44141', '44150', '44235', '44251',
#        '44255', '46001', '46002', '46004', '46005', '46006', '46011',
#        '46012', '46013', '46014', '46015', '46022', '46026', '46027',
#        '46028', '46029', '46030', '46035', '46036', '46041', '46042',
#        '46047', '46050', '46054', '46059', '46061', '46062', '46063',
#        '46066', '46069', '46070', '46071', '46072', '46073', '46075',
#        '46076', '46078', '46080', '46082', '46083', '46084', '46085',
#        '46086', '46089', '46114', '46132', '46138', '46139', '46145',
#        '46147', '46183', '46184', '46185', '46204', '46205', '46206',
#        '46207', '46208', '46211', '46212', '46213', '46214', '46218',
#        '46219', '46227', '46229', '46232', '46238', '46239', '46243',
#        '46244', '46246', '46247', '46248', '46249', '51000', '51001',
#        '51002', '51003', '51004', '51101', '51200', '51202', '51203',
#        '51204', '51207', '52200', '52201', '52202', '55014', '55017',
#        '55018', '55019', '55020', '55022', '55024', '55026', '55028',
#        '55029', '55031', '55032', '55033', '55035', '55039', '55040',
#        '55041', '56002', '56004', '56005', '56006', '56007', '56010',
#        '56011', '56012', '61001', '61002', '61196', '61197', '61198',
#        '61280', '61281', '61289', '61417', '61430', '61X00', '61X03',
#        '61X05', '61X07', '61X08', '61X09', '62001', '62023', '62024',
#        '62025', '62029', '62042', '62044', '62045', '62046', '62047',
#        '62048', '62052', '62064', '62066', '62067', '62069', '62072',
#        '62074', '62077', '62079', '62081', '62082', '62083', '62084',
#        '62085', '62090', '62091', '62092', '62093', '62094', '62095',
#        '62102', '62105', '62106', '62107', '62108', '62111', '62112',
#        '62116', '62117', '62118', '62119', '62122', '62125', '62126',
#        '62127', '62128', '62130', '62132', '62133', '62134', '62135',
#        '62142', '62143', '62144', '62145', '62146', '62149', '62150',
#        '62152', '62153', '62155', '62162', '62163', '62164', '62165',
#        '62286', '62287', '62289', '62290', '62292', '62293', '62301',
#        '62303', '62442', '62X20', '63055', '63056', '63057', '63101',
#        '63103', '63104', '63108', '63110', '63112', '63113', '63115',
#        '64041', '64045', '64046', '66021', '66022', '66024', 'BSH01',
#        'BSH02', 'BSH03', 'BSH04', 'BSH05', 'FAWV1', 'FAWV2', 'FAWV3',
#        'FAWV4', 'KCH10', 'KCH13', 'LF3F', 'LF3J', 'LF3N', 'LF4B', 'LF4C',
#        'LF4H', 'LF5T', 'LF5U', 'NZBHd', 'NZBan', 'TFBLK', 'TFGRS',
#        'TFGRV', 'TFGSK', 'TFKGR', 'TFSRT', 'TFSTD']

# SHPSYN
# station_id = "03380", "62023", "62029", "62050", "62095", "62102", "62103", 
#    "62104", "62107", "62111", "62112", "62113", "62114", "62115", "62116", 
#    "62117", "62118", "62119", "62120", "62121", "62122", "62123", "62124", 
#    "62127", "62128", "62129", "62130", "62131", "62132", "62133", "62134", 
#    "62135", "62136", "62137", "62138", "62139", "62140", "62141", "62143", 
#    "62144", "62145", "62146", "62147", "62148", "62149", "62150", "62151", 
#    "62152", "62153", "62154", "62155", "62156", "62157", "62158", "62159", 
#    "62160", "62161", "62162", "62163", "62164", "62165", "62166", "62167", 
#    "62168", "62170", "62296", "62297", "62302", "62305", "62442", "63055", 
#    "63056", "63057", "63058", "63059", "63101", "63102", "63103", "63104", 
#    "63105", "63106", "63107", "63108", "63109", "63110", "63111", "63112", 
#    "63113", "63114", "63115", "63116", "63117", "63118", "63120", "64041", 
#    "64046", "64049", "LF4B", "LF4C", "LF4H", "LF5U" 

# ------------------------------------------------------------------------
# set year, month and day for the start cycle - t0
year=2013
month=11
day=28
fcday=0

cycle=datetime.datetime(year,month,day,0)

# -----------------------------------------------------------------------
# Set number of days (or months for JCOMM) you want to concatenate
days_lead = 10

# -----------------------------------------------------------------------
# Set variables
# WAVENET
varname = 'hs'
#varname = ['hs','tp','t02','dir','spr']

# WFVS-JCOMM
#varname = ['hs','te', 't02', 'tp','ws','wdir']

# SHPSYN
#varname = ['hs','tp','t02','ws','wdir']

VAR = []
# ----------------------------------------------------------------------
# Call function to get timeseries
# E.g., var1 = rdobs.create_timeseries(IDs[0], obs_name, varname, cycle, days_lead)

for ia in range(len(varname)):
    VAR.append(rdobs.create_timeseries(IDs, obs_name, varname, cycle, days_lead))
    # var is a class for the loaded data - show the available attributes
    print()
    print('var is a python object with the following keys:')
    print(VAR[ia].__dict__.keys())
    # print the shape of the loaded data [t,y,x]
    print('array shape for data loaded into var is as follows:')
    print(numpy.shape(VAR[ia].data))
    
# ----------------------------------------------------------------------
# Quick plot to check it is working - hs
# plot gridded field using pcolormesh
gvar = matplotlib.pyplot.plot(VAR[0].times[:],VAR[0].data[:],'-k')

# generate a title using the long name and validity time values
title = '%s: %s to %s' %(VAR[0].longname, VAR[0].times[0].strftime('%Y-%m-%d'), VAR[0].times[-1].strftime('%Y-%m-%d'))
matplotlib.pyplot.title(title)

# save the plot
out_name = os.path.join(outdir,IDs[0]+'_storm_Ex-timeseries.png')
matplotlib.pyplot.savefig(out_name,bbox_inches="tight", pad_inches=0.1, dpi=150)